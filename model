
randomseed = 1

def pstemr(seqlen, dof, channels):
    
    
    skelsilayer = keras.Input(shape=(seqlen, dof, channels)) #(seqlen, numofjoints, 3)

    gnskelsilayer = keras.layers.GaussianNoise(stddev=0.01, seed=randomseed)(skelsilayer)

    rescale = MyRescale(randomseed=randomseed)
    reskelsilayer = rescale(gnskelsilayer)


    skelencoder = keras.Sequential()
    skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20, 20, 20], joints_graph, graph_weights)))
    #skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20, 20, 20], joints_graph, graph_weights)))
    skelencoder.add(keras.layers.Reshape((-1, 120)))
    
    #skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20], joints_graph, graph_weights)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))
    #skelencoder.add(keras.layers.TimeDistributed(keras.layers.LSTM(3, return_sequences=True)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))
    
    #skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20], joints_graph, graph_weights)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))
    #skelencoder.add(keras.layers.TimeDistributed(keras.layers.LSTM(3, return_sequences=True)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))



    embedding1 = skelencoder(gnskelsilayer)
  
    reembedding1 = skelencoder(reskelsilayer)


    timeencoder = keras.Sequential()
    timeencoder.add(keras.layers.LSTM(3, return_sequences=True))
    #timeencoder.add(keras.layers.LSTM(50, return_sequences=False))
    timeencoder.add(keras.layers.Reshape((-1,)))

    embedding2 = timeencoder(embedding1)
    reembedding2 = timeencoder(reembedding1)
    
    embedder = keras.Sequential()
    embedder.add(keras.layers.Dense(20))
    #embedder.add(keras.layers.Reshape((-1,)))
    
    embeddingout =  keras.layers.Reshape((20,), name='embedding_out')(embedder(embedding2))
    reembeddingout = embedder(reembedding2)

    
    embeddingdiff = keras.layers.Subtract()([embeddingout, reembeddingout])
    reshapedembeddingdiff = keras.layers.Reshape((-1, 1))(embeddingdiff)
    diffout = keras.layers.GlobalMaxPool1D(name='diff_out')(reshapedembeddingdiff)

    
    
    classifier1 = keras.layers.Dense(20)(embedding2)
    classifier2 = keras.layers.Dense(20)(classifier1)
    #classifier3 = keras.layers.Dense(20)(classifier2)

    actionoutlayer = keras.layers.Dense(6, activation='sigmoid', name='action_out')(classifier2)
    

                                  
    net = keras.Model(inputs=skelsilayer,
                        outputs=[actionoutlayer, diffout])

    return net


def weighted_crossentropy(y_true, y_pred):

    gamma = 1
    beta = 2

    
    propn =  tf.reduce_sum(y_true, axis=0, keepdims=True)/tf.reduce_sum(y_true)
    wgts = tf.reduce_sum(tf.math.pow(((1-propn)+gamma), beta)*y_true, axis=1)


    cce = tf.keras.losses.CategoricalCrossentropy(reduction=tf.keras.losses.Reduction.NONE)
    base_cce = cce(y_true, y_pred)


    
    return tf.reduce_mean(base_cce*wgts)



def weighted_mse(y_true, y_pred):

    gamma = 1
    beta = 2

    
    propn =  tf.reduce_sum(y_true, axis=0, keepdims=True)/tf.reduce_sum(y_true)
    wgts = tf.reduce_sum(tf.math.pow(((1-propn)+gamma), beta)*y_true, axis=1)


    mse = tf.keras.losses.MeanSquaredError(reduction=tf.keras.losses.Reduction.NONE)
    base_mse = mse(y_true, y_pred)


    
    return tf.reduce_mean(base_mse*wgts)



class MyRescale(keras.layers.Layer):
    def __init__(self, randomseed, **kwargs):
        super(MyRescale, self).__init__(**kwargs)
        
        self.randomseed = tf.random.set_seed(randomseed)
        


    def call(self, inputs):


        scale = tf.random.uniform([tf.shape(inputs)[0], 1, 1, 1], minval=-2, maxval=2, seed=self.randomseed, dtype=tf.float32)
        scale = tf.repeat(scale, repeats=tf.shape(inputs)[1], axis=1)
        scale = tf.repeat(scale, repeats=tf.shape(inputs)[2], axis=2)
        scale = tf.repeat(scale, repeats=tf.shape(inputs)[3], axis=3)

        outputs = inputs*scale

        translation = tf.random.uniform([tf.shape(inputs)[0], 1, 1, 1], minval=-0.5, maxval=0.5, seed=self.randomseed, dtype=tf.float32)
        translation = tf.repeat(translation, repeats=tf.shape(inputs)[1], axis=1)
        translation = tf.repeat(translation, repeats=tf.shape(inputs)[2], axis=2)
        translation = tf.repeat(translation, repeats=tf.shape(inputs)[3], axis=3)

        outputs = inputs + translation
        
        return outputs

    

    def compute_output_shape(self, input_shape):

        return tf.TensorShape(input_shape)

    

    def get_config(self):
        config = super(MyRescale, self).get_config()

        # Specify here all the values for the constructor's parameters
        config['randomseed'] = self.randomseed

        return config

    @classmethod
    def from_config(cls, config):
        return cls(**config)

