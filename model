


def pstemr(seqlen, dof, channels):
    
    
    skelsilayer = keras.Input(shape=(seqlen, dof, channels)) #(seqlen, numofjoints, 3)

    gnskelsilayer = keras.layers.GaussianNoise(stddev=0.01, seed=randomseed)(skelsilayer)

    rescale = MyRescale(randomseed=randomseed)
    reskelsilayer = rescale(gnskelsilayer)


    skelencoder = keras.Sequential()
    skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20, 20, 20], joints_graph, graph_weights)))
    #skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20, 20, 20], joints_graph, graph_weights)))
    skelencoder.add(keras.layers.Reshape((-1, 120)))
    
    #skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20], joints_graph, graph_weights)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))
    #skelencoder.add(keras.layers.TimeDistributed(keras.layers.LSTM(3, return_sequences=True)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))
    
    #skelencoder.add(keras.layers.TimeDistributed(GraphConvNN([20], joints_graph, graph_weights)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))
    #skelencoder.add(keras.layers.TimeDistributed(keras.layers.LSTM(3, return_sequences=True)))
    #skelencoder.add(keras.layers.Permute((2, 1, 3)))



    embedding1 = skelencoder(gnskelsilayer)
    #print(embedding1)
    reembedding1 = skelencoder(reskelsilayer)


    #print(embedding1)

    timeencoder = keras.Sequential()
    timeencoder.add(keras.layers.LSTM(3, return_sequences=True))
    #timeencoder.add(keras.layers.LSTM(50, return_sequences=False))
    timeencoder.add(keras.layers.Reshape((-1,)))

    embedding2 = timeencoder(embedding1)
    reembedding2 = timeencoder(reembedding1)
    
    embedder = keras.Sequential()
    embedder.add(keras.layers.Dense(20))
    #embedder.add(keras.layers.Reshape((-1,)))
    
    embeddingout =  keras.layers.Reshape((20,), name='embedding_out')(embedder(embedding2))
    reembeddingout = embedder(reembedding2)

    #print(embedding1)
    
    embeddingdiff = keras.layers.Subtract()([embeddingout, reembeddingout])
    reshapedembeddingdiff = keras.layers.Reshape((-1, 1))(embeddingdiff)
    diffout = keras.layers.GlobalMaxPool1D(name='diff_out')(reshapedembeddingdiff)

    
    
    classifier1 = keras.layers.Dense(20)(embedding2)
    classifier2 = keras.layers.Dense(20)(classifier1)
    #classifier3 = keras.layers.Dense(20)(classifier2)

    actionoutlayer = keras.layers.Dense(6, activation='sigmoid', name='action_out')(classifier2)
    

                                  
    net = keras.Model(inputs=skelsilayer,
                        outputs=[actionoutlayer, diffout])

    return net
